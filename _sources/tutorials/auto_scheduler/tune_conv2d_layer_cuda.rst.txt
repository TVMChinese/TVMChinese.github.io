.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. _auto-scheduler-conv-gpu:

Auto-scheduling a Convolution Layer for GPU
===========================================
**Author**: `Lianmin Zheng <https://github.com/merrymercy>`_,             `Chengfan Jia <https://github.com/jcf94/>`_

This is a tutorial on how to use the auto-scheduler for GPUs.

Different from the template-based :ref:`autotvm <tutorials-autotvm-sec>` which relies on
manual templates to define the search space, the auto-scheduler does not require any templates.
Users only need to write the computation declaration without any schedule commands or templates.
The auto-scheduler can automatically generate a large search space and
find a good schedule in the space.

We use a convolution layer as an example in this tutorial.

Note that this tutorial will not run on Windows or recent versions of macOS. To
get it to run, you will need to wrap the body of this tutorial in a :code:`if
__name__ == "__main__":` block.


.. code-block:: default


    import os

    import numpy as np
    import tvm
    from tvm import te, auto_scheduler, topi
    from tvm.topi.testing import conv2d_nchw_python







Define the computation
^^^^^^^^^^^^^^^^^^^^^^
To begin with, let us define the computation of a convolution layer.
The function should return the list of input/output tensors.
From these tensors, the auto-scheduler can get the whole computational graph.


.. code-block:: default



    @auto_scheduler.register_workload
    def conv2d_layer(N, H, W, CO, CI, KH, KW, stride, padding):
        data = te.placeholder((N, CI, H, W), name="data")
        kernel = te.placeholder((CO, CI, KH, KW), name="kernel")
        bias = te.placeholder((1, CO, 1, 1), name="bias")
        conv = topi.nn.conv2d_nchw(data, kernel, stride, padding, dilation=1, out_dtype="float32")
        out = topi.nn.relu(conv + bias)
        return [data, kernel, bias, out]








Create the search task
^^^^^^^^^^^^^^^^^^^^^^
We then create a search task for the last convolution layer in the resnet.


.. code-block:: default


    target = tvm.target.Target("cuda")

    # Use the last layer in ResNet-50
    N, H, W, CO, CI, KH, KW, strides, padding = 1, 7, 7, 512, 512, 3, 3, (1, 1), (1, 1)
    task = auto_scheduler.SearchTask(
        func=conv2d_layer, args=(N, H, W, CO, CI, KH, KW, strides, padding), target=target
    )

    # Inspect the computational graph
    print("Computational DAG:")
    print(task.compute_dag)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Computational DAG:
    data = PLACEHOLDER [1, 512, 7, 7]
    pad_temp(i0, i1, i2, i3) = tir.if_then_else(((((i2 >= 1) && (i2 < 8)) && (i3 >= 1)) && (i3 < 8)), data[i0, i1, (i2 - 1), (i3 - 1)], 0f)
    kernel = PLACEHOLDER [512, 512, 3, 3]
    compute(nn, ff, yy, xx) += (pad_temp[nn, rc, (yy + ry), (xx + rx)]*kernel[ff, rc, ry, rx])
    bias = PLACEHOLDER [1, 512, 1, 1]
    T_add(ax0, ax1, ax2, ax3) = (compute[ax0, ax1, ax2, ax3] + bias[ax0, ax1, 0, 0])
    compute(i0, i1, i2, i3) = max(T_add[i0, i1, i2, i3], 0f)




Next, we set parameters for the auto-scheduler. These parameters
mainly specify how we do the measurement during the search.

* :code:`measure_ctx` launches a different process for measurement to
  provide isolation. It can protect the master process from GPU crashes
  during measurement and avoid other runtime conflicts.
* :code:`min_repeat_ms` defines the minimum duration of one "repeat" in every measurement.
  This can warmup the GPU, which is necessary to get accurate measurement results.
  Typically, we recommend a value >= 300 ms.
* :code:`num_measure_trials` is the number of measurement trials we can use during the search.
  We only make 10 trials in this tutorial for a fast demonstration. In practice, 1000 is a
  good value for the search to converge. You can do more trials according to your time budget.
* In addition, we use :code:`RecordToFile` to dump measurement records into a file `conv2d.json`.
  The measurement records can be used to query the history best, resume the search,
  and do more analyses later.
* see :any:`auto_scheduler.TuningOptions`,
  :any:`auto_scheduler.LocalRPCMeasureContext` for more parameters.


.. code-block:: default


    log_file = "conv2d.json"
    measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
    tune_option = auto_scheduler.TuningOptions(
        num_measure_trials=10,  # change this to 1000 to achieve the best performance
        runner=measure_ctx.runner,
        measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        verbose=2,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Get devices for measurement successfully!



Run the search
^^^^^^^^^^^^^^
Now we get all inputs ready. Pretty simple, isn't it?
We can kick off the search and let the auto-scheduler do its magic.
After some measurement trials, we can load the best schedule from the log
file and apply it.


.. code-block:: default


    # Run auto-tuning (search)
    task.tune(tune_option)
    # Apply the best schedule
    sch, args = task.apply_best(log_file)

    # Kill the measurement process
    del measure_ctx





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none





We can lower the schedule to see the IR after auto-scheduling.
The auto-scheduler correctly performs optimizations including multi-level tiling,
cooperative fetching, unrolling and operator fusion.


.. code-block:: default


    print("Lowered TIR:")
    print(tvm.lower(sch, args, simple_mode=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowered TIR:
    primfn(data_1: handle, kernel_1: handle, bias_1: handle, compute_1: handle) -> ()
      attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
      buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 bias: Buffer(bias_2: Pointer(float32), float32, [1, 512, 1, 1], []),
                 data: Buffer(data_2: Pointer(float32), float32, [1, 512, 7, 7], []),
                 kernel: Buffer(kernel_2: Pointer(float32), float32, [512, 512, 3, 3], [])}
      buffer_map = {data_1: data, kernel_1: kernel, bias_1: bias, compute_1: compute} {
      attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 112;
      allocate(compute_3: Pointer(local float32), float32, [4]), storage_scope = local;
      allocate(pad_temp.shared: Pointer(shared float32), float32, [108]), storage_scope = shared;
      allocate(kernel.shared: Pointer(shared float32), float32, [1152]), storage_scope = shared;
      attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56 {
        compute_3[0] = 0f32
        compute_3[1] = 0f32
        compute_3[2] = 0f32
        compute_3[3] = 0f32
        for (rc.outer.outer: int32, 0, 128) {
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          pad_temp.shared[threadIdx.x_1] = @tir.if_then_else(((((3 <= floormod(threadIdx.x_1, 27)) && (floormod(threadIdx.x_1, 27) < 24)) && (1 <= (floormod(blockIdx.x, 7) + floormod(threadIdx.x_1, 3)))) && ((floormod(blockIdx.x, 7) + floormod(threadIdx.x_1, 3)) < 8)), (float32*)data_2[((((((rc.outer.outer*196) + (floordiv(threadIdx.x_1, 27)*49)) + (floordiv(floormod(threadIdx.x_1, 27), 3)*7)) + floormod(blockIdx.x, 7)) + floormod(threadIdx.x_1, 3)) - 8)], 0f32, dtype=float32)
          attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          if @tir.likely((threadIdx.x_1 < 52), dtype=bool) {
            pad_temp.shared[(threadIdx.x_1 + 56)] = @tir.if_then_else(((((3 <= floormod((threadIdx.x_1 + 2), 27)) && (floormod((threadIdx.x_1 + 2), 27) < 24)) && (1 <= (floormod(blockIdx.x, 7) + floormod((threadIdx.x_1 + 2), 3)))) && ((floormod(blockIdx.x, 7) + floormod((threadIdx.x_1 + 2), 3)) < 8)), (float32*)data_2[((((((rc.outer.outer*196) + (floordiv((threadIdx.x_1 + 56), 27)*49)) + (floordiv(floormod((threadIdx.x_1 + 2), 27), 3)*7)) + floormod(blockIdx.x, 7)) + floormod((threadIdx.x_1 + 2), 3)) - 8)], 0f32, dtype=float32)
          }
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[threadIdx.x_2] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 36)*4608)) + (rc.outer.outer*36)) + floormod(threadIdx.x_2, 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 56)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 56), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 20), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 112)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 112), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 4), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 168)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 168), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 24), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 224)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 224), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 8), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 280)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 280), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 28), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 336)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 336), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 12), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 392)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 392), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 32), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 448)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 448), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 16), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 504)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 36)*4608)) + (rc.outer.outer*36)) + floormod(threadIdx.x_2, 36)) + 64512)]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 560)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 560), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 20), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 616)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 616), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 4), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 672)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 672), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 24), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 728)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 728), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 8), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 784)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 784), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 28), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 840)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 840), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 12), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 896)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 896), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 32), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 952)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 952), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 16), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 1008)] = (float32*)kernel_2[(((((floordiv(blockIdx.x, 7)*147456) + (floordiv(threadIdx.x_2, 36)*4608)) + (rc.outer.outer*36)) + floormod(threadIdx.x_2, 36)) + 129024)]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          kernel.shared[(threadIdx.x_2 + 1064)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 1064), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 20), 36))]
          attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 56;
          if @tir.likely((threadIdx.x_2 < 32), dtype=bool) {
            kernel.shared[(threadIdx.x_2 + 1120)] = (float32*)kernel_2[((((floordiv(blockIdx.x, 7)*147456) + (floordiv((threadIdx.x_2 + 1120), 36)*4608)) + (rc.outer.outer*36)) + floormod((threadIdx.x_2 + 4), 36))]
          }
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7)*3)]*(float32*)kernel.shared[(floordiv(threadIdx.x, 7)*144)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 1)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 1)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 2)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 2)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 27)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 9)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 10)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 29)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 11)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7)*3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 36)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 1)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 37)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 2)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 38)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 27)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 45)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 46)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 29)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 47)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7)*3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 72)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 1)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 73)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 2)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 74)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 27)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 81)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 82)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 29)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 83)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[(floormod(threadIdx.x, 7)*3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 108)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 1)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 109)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 2)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 110)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 27)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 117)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 28)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 118)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 29)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 119)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 3)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 4)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 4)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 5)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 5)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 30)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 12)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 31)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 13)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 32)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 14)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 39)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 4)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 40)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 5)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 41)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 30)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 48)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 31)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 49)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 32)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 50)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 75)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 4)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 76)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 5)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 77)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 30)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 84)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 31)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 85)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 32)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 86)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 3)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 111)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 4)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 112)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 5)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 113)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 30)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 120)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 31)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 121)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 32)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 122)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 6)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 6)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 7)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 8)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 8)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 33)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 15)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 34)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 16)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 17)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 6)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 42)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 43)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 8)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 44)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 33)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 51)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 34)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 52)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 53)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 6)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 78)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 79)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 8)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 80)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 33)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 87)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 34)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 88)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 89)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 6)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 114)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 7)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 115)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 8)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 116)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 33)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 123)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 34)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 124)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 35)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 125)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 54)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 18)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 55)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 19)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 20)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 81)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 27)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 82)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 28)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 83)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 29)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 54)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 54)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 55)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 55)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 56)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 81)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 63)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 82)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 64)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 83)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 65)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 54)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 90)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 55)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 91)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 92)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 81)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 99)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 82)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 100)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 83)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 101)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 54)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 126)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 55)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 127)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 56)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 128)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 81)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 135)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 82)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 136)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 83)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 137)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 57)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 21)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 58)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 22)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 59)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 23)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 30)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 85)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 31)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 86)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 32)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 57)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 57)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 58)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 58)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 59)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 59)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 66)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 85)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 67)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 86)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 68)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 57)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 93)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 58)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 94)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 59)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 95)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 102)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 85)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 103)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 86)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 104)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 57)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 129)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 58)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 130)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 59)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 131)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 84)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 138)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 85)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 139)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 86)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 140)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 60)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 24)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 61)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 25)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 62)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 26)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 87)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 33)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 88)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 34)]))
          compute_3[0] = ((float32*)compute_3[0] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 89)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 35)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 60)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 60)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 61)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 61)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 62)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 62)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 87)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 69)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 88)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 70)]))
          compute_3[1] = ((float32*)compute_3[1] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 89)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 71)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 60)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 96)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 61)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 97)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 62)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 98)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 87)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 105)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 88)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 106)]))
          compute_3[2] = ((float32*)compute_3[2] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 89)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 107)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 60)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 132)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 61)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 133)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 62)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 134)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 87)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 141)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 88)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 142)]))
          compute_3[3] = ((float32*)compute_3[3] + ((float32*)pad_temp.shared[((floormod(threadIdx.x, 7)*3) + 89)]*(float32*)kernel.shared[((floordiv(threadIdx.x, 7)*144) + 143)]))
        }
        for (i1.inner: int32, 0, 4) {
          compute_2[(((((floordiv(blockIdx.x, 7)*1568) + (floordiv(threadIdx.x, 7)*196)) + (i1.inner*49)) + (floormod(threadIdx.x, 7)*7)) + floormod(blockIdx.x, 7))] = max(((float32*)compute_3[i1.inner] + (float32*)bias_2[(((floordiv(blockIdx.x, 7)*32) + (floordiv(threadIdx.x, 7)*4)) + i1.inner)]), 0f32)
        }
      }
    }





Check correctness and evaluate performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We build the binary and check its correctness and performance.


.. code-block:: default


    func = tvm.build(sch, args, target)

    # Check correctness
    data_np = np.random.uniform(size=(N, CI, H, W)).astype(np.float32)
    weight_np = np.random.uniform(size=(CO, CI, KH, KW)).astype(np.float32)
    bias_np = np.random.uniform(size=(1, CO, 1, 1)).astype(np.float32)
    conv_np = conv2d_nchw_python(data_np, weight_np, strides, padding)
    out_np = np.maximum(conv_np + bias_np, 0.0)

    dev = tvm.cuda()
    data_tvm = tvm.nd.array(data_np, device=dev)
    weight_tvm = tvm.nd.array(weight_np, device=dev)
    bias_tvm = tvm.nd.array(bias_np, device=dev)
    out_tvm = tvm.nd.empty(out_np.shape, device=dev)
    func(data_tvm, weight_tvm, bias_tvm, out_tvm)

    # Check results
    np.testing.assert_allclose(out_np, out_tvm.numpy(), rtol=1e-3)

    # Evaluate execution time
    evaluator = func.time_evaluator(func.entry_name, dev, min_repeat_ms=500)
    print(
        "Execution time of this operator: %.3f ms"
        % (np.median(evaluator(data_tvm, weight_tvm, bias_tvm, out_tvm).results) * 1000)
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Execution time of this operator: 0.178 ms



Using the record file
^^^^^^^^^^^^^^^^^^^^^
During the search, all measurement records are dumped into the record
file "conv2d.json". The measurement records can be used to re-apply search results,
resume the search, and perform other analyses.

Here is an example where we load the best schedule from a file,
print the equivalent python schedule API and CUDA source code.
They can be used for debugging and learning the behavior of the auto-scheduler.


.. code-block:: default


    print("Equivalent python schedule:")
    print(task.print_best(log_file, print_mode="schedule"))

    print("CUDA source code:")
    print(task.print_best(log_file, print_mode="cuda"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Equivalent python schedule:
    pad_temp_i0, pad_temp_i1, pad_temp_i2, pad_temp_i3 = tuple(pad_temp.op.axis) + tuple(pad_temp.op.reduce_axis)
    compute_nn, compute_ff, compute_yy, compute_xx, compute_rc, compute_ry, compute_rx = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    T_add_ax0, T_add_ax1, T_add_ax2, T_add_ax3 = tuple(T_add.op.axis) + tuple(T_add.op.reduce_axis)
    compute_i0, compute_i1, compute_i2, compute_i3 = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
    s[T_add].compute_inline()
    compute_nn_o_i, compute_nn_i = s[compute].split(compute_nn, factor=1)
    compute_nn_o_o_i, compute_nn_o_i = s[compute].split(compute_nn_o_i, factor=1)
    compute_nn_o_o_o_i, compute_nn_o_o_i = s[compute].split(compute_nn_o_o_i, factor=1)
    compute_nn_o_o_o_o, compute_nn_o_o_o_i = s[compute].split(compute_nn_o_o_o_i, factor=1)
    compute_ff_o_i, compute_ff_i = s[compute].split(compute_ff, factor=1)
    compute_ff_o_o_i, compute_ff_o_i = s[compute].split(compute_ff_o_i, factor=4)
    compute_ff_o_o_o_i, compute_ff_o_o_i = s[compute].split(compute_ff_o_o_i, factor=8)
    compute_ff_o_o_o_o, compute_ff_o_o_o_i = s[compute].split(compute_ff_o_o_o_i, factor=1)
    compute_yy_o_i, compute_yy_i = s[compute].split(compute_yy, factor=1)
    compute_yy_o_o_i, compute_yy_o_i = s[compute].split(compute_yy_o_i, factor=1)
    compute_yy_o_o_o_i, compute_yy_o_o_i = s[compute].split(compute_yy_o_o_i, factor=7)
    compute_yy_o_o_o_o, compute_yy_o_o_o_i = s[compute].split(compute_yy_o_o_o_i, factor=1)
    compute_xx_o_i, compute_xx_i = s[compute].split(compute_xx, factor=1)
    compute_xx_o_o_i, compute_xx_o_i = s[compute].split(compute_xx_o_i, factor=1)
    compute_xx_o_o_o_i, compute_xx_o_o_i = s[compute].split(compute_xx_o_o_i, factor=1)
    compute_xx_o_o_o_o, compute_xx_o_o_o_i = s[compute].split(compute_xx_o_o_o_i, factor=1)
    compute_rc_o_i, compute_rc_i = s[compute].split(compute_rc, factor=2)
    compute_rc_o_o, compute_rc_o_i = s[compute].split(compute_rc_o_i, factor=2)
    compute_ry_o_i, compute_ry_i = s[compute].split(compute_ry, factor=1)
    compute_ry_o_o, compute_ry_o_i = s[compute].split(compute_ry_o_i, factor=3)
    compute_rx_o_i, compute_rx_i = s[compute].split(compute_rx, factor=3)
    compute_rx_o_o, compute_rx_o_i = s[compute].split(compute_rx_o_i, factor=1)
    s[compute].reorder(compute_nn_o_o_o_o, compute_ff_o_o_o_o, compute_yy_o_o_o_o, compute_xx_o_o_o_o, compute_nn_o_o_o_i, compute_ff_o_o_o_i, compute_yy_o_o_o_i, compute_xx_o_o_o_i, compute_nn_o_o_i, compute_ff_o_o_i, compute_yy_o_o_i, compute_xx_o_o_i, compute_rc_o_o, compute_ry_o_o, compute_rx_o_o, compute_rc_o_i, compute_ry_o_i, compute_rx_o_i, compute_nn_o_i, compute_ff_o_i, compute_yy_o_i, compute_xx_o_i, compute_rc_i, compute_ry_i, compute_rx_i, compute_nn_i, compute_ff_i, compute_yy_i, compute_xx_i)
    compute_i0_o_i, compute_i0_i = s[compute].split(compute_i0, factor=1)
    compute_i0_o_o_i, compute_i0_o_i = s[compute].split(compute_i0_o_i, factor=1)
    compute_i0_o_o_o, compute_i0_o_o_i = s[compute].split(compute_i0_o_o_i, factor=1)
    compute_i1_o_i, compute_i1_i = s[compute].split(compute_i1, factor=4)
    compute_i1_o_o_i, compute_i1_o_i = s[compute].split(compute_i1_o_i, factor=8)
    compute_i1_o_o_o, compute_i1_o_o_i = s[compute].split(compute_i1_o_o_i, factor=1)
    compute_i2_o_i, compute_i2_i = s[compute].split(compute_i2, factor=1)
    compute_i2_o_o_i, compute_i2_o_i = s[compute].split(compute_i2_o_i, factor=7)
    compute_i2_o_o_o, compute_i2_o_o_i = s[compute].split(compute_i2_o_o_i, factor=1)
    compute_i3_o_i, compute_i3_i = s[compute].split(compute_i3, factor=1)
    compute_i3_o_o_i, compute_i3_o_i = s[compute].split(compute_i3_o_i, factor=1)
    compute_i3_o_o_o, compute_i3_o_o_i = s[compute].split(compute_i3_o_o_i, factor=1)
    s[compute].reorder(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o, compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i, compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i, compute_i0_i, compute_i1_i, compute_i2_i, compute_i3_i)
    s[compute].compute_at(s[compute], compute_i3_o_i)
    kernel_shared = s.cache_read(kernel, "shared", [compute])
    kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3 = tuple(kernel_shared.op.axis)
    s[kernel_shared].compute_at(s[compute], compute_rx_o_o)
    pad_temp_shared = s.cache_read(pad_temp, "shared", [compute])
    pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3 = tuple(pad_temp_shared.op.axis)
    s[pad_temp_shared].compute_at(s[compute], compute_rx_o_o)
    s[pad_temp].compute_inline()
    compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused = s[compute].fuse(compute_i0_o_o_o, compute_i1_o_o_o, compute_i2_o_o_o, compute_i3_o_o_o)
    s[compute].bind(compute_i0_o_o_o_i1_o_o_o_fused_i2_o_o_o_fused_i3_o_o_o_fused, te.thread_axis("blockIdx.x"))
    compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused = s[compute].fuse(compute_i0_o_o_i, compute_i1_o_o_i, compute_i2_o_o_i, compute_i3_o_o_i)
    s[compute].bind(compute_i0_o_o_i_i1_o_o_i_fused_i2_o_o_i_fused_i3_o_o_i_fused, te.thread_axis("vthread"))
    compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused = s[compute].fuse(compute_i0_o_i, compute_i1_o_i, compute_i2_o_i, compute_i3_o_i)
    s[compute].bind(compute_i0_o_i_i1_o_i_fused_i2_o_i_fused_i3_o_i_fused, te.thread_axis("threadIdx.x"))
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[kernel_shared].fuse(kernel_shared_ax0, kernel_shared_ax1, kernel_shared_ax2, kernel_shared_ax3)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[kernel_shared].vectorize(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[kernel_shared].split(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[kernel_shared].bind(kernel_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused = s[pad_temp_shared].fuse(pad_temp_shared_ax0, pad_temp_shared_ax1, pad_temp_shared_ax2, pad_temp_shared_ax3)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused, factor=1)
    s[pad_temp_shared].vectorize(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_i)
    pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_o, pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i = s[pad_temp_shared].split(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o, factor=56)
    s[pad_temp_shared].bind(pad_temp_shared_ax0_ax1_fused_ax2_fused_ax3_fused_o_i, te.thread_axis("threadIdx.x"))
    s[compute].pragma(compute_nn_o_o_o_o, "auto_unroll_max_step", 1024)
    s[compute].pragma(compute_nn_o_o_o_o, "unroll_explicit", True)

    CUDA source code:

    #ifdef _WIN32
      using uint = unsigned int;
      using uchar = unsigned char;
      using ushort = unsigned short;
      using int64_t = long long;
      using uint64_t = unsigned long long;
    #else
      #define uint unsigned int
      #define uchar unsigned char
      #define ushort unsigned short
      #define int64_t long long
      #define uint64_t unsigned long long
    #endif
    extern "C" __global__ void __launch_bounds__(56) default_function_kernel0(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute, float* __restrict__ bias) {
      float compute1[4];
      __shared__ float pad_temp_shared[108];
      __shared__ float kernel_shared[1152];
      compute1[(0)] = 0.000000e+00f;
      compute1[(1)] = 0.000000e+00f;
      compute1[(2)] = 0.000000e+00f;
      compute1[(3)] = 0.000000e+00f;
      for (int rc_outer_outer = 0; rc_outer_outer < 128; ++rc_outer_outer) {
        __syncthreads();
        pad_temp_shared[(((int)threadIdx.x))] = (((((3 <= (((int)threadIdx.x) % 27)) && ((((int)threadIdx.x) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)))) && (((((int)blockIdx.x) % 7) + (((int)threadIdx.x) % 3)) < 8)) ? data[(((((((rc_outer_outer * 196) + ((((int)threadIdx.x) / 27) * 49)) + (((((int)threadIdx.x) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + (((int)threadIdx.x) % 3)) - 8))] : 0.000000e+00f);
        if (((int)threadIdx.x) < 52) {
          pad_temp_shared[((((int)threadIdx.x) + 56))] = (((((3 <= ((((int)threadIdx.x) + 2) % 27)) && (((((int)threadIdx.x) + 2) % 27) < 24)) && (1 <= ((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)))) && (((((int)blockIdx.x) % 7) + ((((int)threadIdx.x) + 2) % 3)) < 8)) ? data[(((((((rc_outer_outer * 196) + (((((int)threadIdx.x) + 56) / 27) * 49)) + ((((((int)threadIdx.x) + 2) % 27) / 3) * 7)) + (((int)blockIdx.x) % 7)) + ((((int)threadIdx.x) + 2) % 3)) - 8))] : 0.000000e+00f);
        }
        kernel_shared[(((int)threadIdx.x))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 56))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 56) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 112))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 112) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 168))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 168) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 224))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 224) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 280))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 280) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 336))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 336) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 392))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 392) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 448))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 448) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 504))] = kernel[(((((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 64512))];
        kernel_shared[((((int)threadIdx.x) + 560))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 560) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 616))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 616) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 4) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 672))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 672) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 24) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 728))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 728) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 8) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 784))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 784) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 28) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 840))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 840) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 12) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 896))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 896) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 32) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 952))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 952) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 16) % 36)))];
        kernel_shared[((((int)threadIdx.x) + 1008))] = kernel[(((((((((int)blockIdx.x) / 7) * 147456) + ((((int)threadIdx.x) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) % 36)) + 129024))];
        kernel_shared[((((int)threadIdx.x) + 1064))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1064) / 36) * 4608)) + (rc_outer_outer * 36)) + ((((int)threadIdx.x) + 20) % 36)))];
        if (((int)threadIdx.x) < 32) {
          kernel_shared[((((int)threadIdx.x) + 1120))] = kernel[((((((((int)blockIdx.x) / 7) * 147456) + (((((int)threadIdx.x) + 1120) / 36) * 4608)) + (rc_outer_outer * 36)) + (((int)threadIdx.x) + 4)))];
        }
        __syncthreads();
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3))] * kernel_shared[(((((int)threadIdx.x) / 7) * 144))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 1))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 1))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 2))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 2))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 27))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 9))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 10))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 29))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 11))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 36))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 1))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 37))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 2))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 38))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 27))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 45))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 46))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 29))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 47))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 72))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 1))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 73))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 2))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 74))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 27))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 81))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 82))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 29))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 83))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((((int)threadIdx.x) % 7) * 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 108))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 1))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 109))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 2))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 110))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 27))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 117))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 28))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 118))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 29))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 119))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 3))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 4))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 4))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 5))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 5))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 30))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 12))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 31))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 13))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 32))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 14))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 39))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 4))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 40))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 5))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 41))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 30))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 48))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 31))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 49))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 32))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 50))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 75))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 4))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 76))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 5))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 77))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 30))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 84))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 31))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 85))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 32))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 86))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 3))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 111))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 4))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 112))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 5))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 113))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 30))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 120))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 31))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 121))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 32))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 122))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 6))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 6))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 7))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 8))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 8))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 33))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 15))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 34))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 16))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 17))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 6))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 42))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 43))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 8))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 44))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 33))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 51))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 34))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 52))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 53))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 6))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 78))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 79))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 8))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 80))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 33))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 87))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 34))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 88))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 89))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 6))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 114))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 7))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 115))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 8))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 116))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 33))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 123))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 34))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 124))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 35))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 125))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 54))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 18))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 55))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 19))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 56))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 20))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 81))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 27))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 82))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 28))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 83))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 29))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 54))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 54))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 55))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 55))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 56))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 56))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 81))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 63))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 82))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 64))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 83))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 65))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 54))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 90))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 55))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 91))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 56))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 92))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 81))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 99))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 82))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 100))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 83))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 101))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 54))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 126))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 55))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 127))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 56))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 128))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 81))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 135))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 82))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 136))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 83))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 137))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 57))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 21))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 58))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 22))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 59))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 23))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 30))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 85))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 31))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 86))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 32))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 57))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 57))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 58))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 58))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 59))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 59))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 66))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 85))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 67))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 86))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 68))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 57))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 93))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 58))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 94))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 59))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 95))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 102))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 85))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 103))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 86))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 104))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 57))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 129))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 58))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 130))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 59))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 131))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 84))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 138))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 85))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 139))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 86))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 140))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 60))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 24))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 61))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 25))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 62))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 26))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 87))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 33))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 88))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 34))]));
        compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 89))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 35))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 60))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 60))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 61))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 61))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 62))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 62))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 87))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 69))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 88))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 70))]));
        compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 89))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 71))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 60))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 96))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 61))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 97))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 62))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 98))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 87))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 105))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 88))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 106))]));
        compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 89))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 107))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 60))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 132))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 61))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 133))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 62))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 134))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 87))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 141))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 88))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 142))]));
        compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((((int)threadIdx.x) % 7) * 3) + 89))] * kernel_shared[((((((int)threadIdx.x) / 7) * 144) + 143))]));
      }
      for (int i1_inner = 0; i1_inner < 4; ++i1_inner) {
        compute[(((((((((int)blockIdx.x) / 7) * 1568) + ((((int)threadIdx.x) / 7) * 196)) + (i1_inner * 49)) + ((((int)threadIdx.x) % 7) * 7)) + (((int)blockIdx.x) % 7)))] = max((compute1[(i1_inner)] + bias[(((((((int)blockIdx.x) / 7) * 32) + ((((int)threadIdx.x) / 7) * 4)) + i1_inner))]), 0.000000e+00f);
      }
    }





A more complicated example is to resume the search.
In this case, we need to create the search policy and cost model by ourselves
and resume the status of search policy and cost model with the log file.
In the example below we resume the status and do more 5 trials.


.. code-block:: default



    def resume_search(task, log_file):
        print("Resume search:")
        cost_model = auto_scheduler.XGBModel()
        cost_model.update_from_file(log_file)
        search_policy = auto_scheduler.SketchPolicy(
            task, cost_model, init_search_callbacks=[auto_scheduler.PreloadMeasuredStates(log_file)]
        )
        measure_ctx = auto_scheduler.LocalRPCMeasureContext(min_repeat_ms=300)
        tune_option = auto_scheduler.TuningOptions(
            num_measure_trials=5,
            runner=measure_ctx.runner,
            measure_callbacks=[auto_scheduler.RecordToFile(log_file)],
        )
        task.tune(tune_option, search_policy=search_policy)

        # Kill the measurement process
        del measure_ctx


    resume_search(task, log_file)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resume search:
    /usr/local/lib/python3.6/dist-packages/xgboost/training.py:17: UserWarning: Old style callback is deprecated.  See: https://xgboost.readthedocs.io/en/latest/python/callbacks.html
      warnings.warn(f'Old style callback is deprecated.  See: {link}', UserWarning)
    Get devices for measurement successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  47.705 seconds)


.. _sphx_glr_download_tutorials_auto_scheduler_tune_conv2d_layer_cuda.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
